/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author qingyuwang
 */
import ij.*;
import ij.io.*;
import ij.process.*;

import java.awt.image.*;
import java.awt.BorderLayout;

import java.lang.Class;
import java.lang.Object;
import java.io.File;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.Thread;
import java.util.Comparator;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.DefaultListModel;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.opencv.core.*;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.Moments;

public class EyeGUI extends javax.swing.JFrame {

    /**
     * Creates new form Hello
     */
    //static{ System.loadLibrary(Core.NATIVE_LIBRARY_NAME);}  
    
    private ArrayList<File> selectedDirectories = new ArrayList<File>();
    private DefaultListModel genotypesList = new DefaultListModel();
            
    public EyeGUI() {
        loadLibrary();
        initComponents();
    }

    private static void loadLibrary() {
        try {
            InputStream in = null;
            File fileOut = null;
            
            String osName = System.getProperty("os.name");         
            if(osName.startsWith("Windows")){
                int bitness = Integer.parseInt(System.getProperty("sun.arch.data.model"));
                if(bitness == 32){
                    in = EyeGUI.class.getResourceAsStream("opencv_java249.dll");
                    fileOut = File.createTempFile("lib", ".dll");
                } else if (bitness == 64){
                    in = EyeGUI.class.getResourceAsStream("opencv_java249.dll");
                    fileOut = File.createTempFile("lib", ".dll");
                } else{
                    in = EyeGUI.class.getResourceAsStream("opencv_java249.dll");
                    fileOut = File.createTempFile("lib", ".dll");
                }
            } else if (osName.equals("Mac OS X")){
                in = EyeGUI.class.getResourceAsStream("libopencv_java2410.dylib");
                fileOut = File.createTempFile("lib", ".dylib");
            }
            
            OutputStream out = FileUtils.openOutputStream(fileOut);
            IOUtils.copy(in, out);
            in.close();
            out.close();
            System.load(fileOut.toString());
        } catch (Exception e) {
            throw new RuntimeException ("Failed to load opencv native libaray.");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        typeButtonGroup = new javax.swing.ButtonGroup();
        directionButtonGroup = new javax.swing.ButtonGroup();
        addJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        genotypeJList = new javax.swing.JList();
        clearJButton = new javax.swing.JButton();
        rmSelJButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        runJButton = new javax.swing.JButton();
        exportJButton = new javax.swing.JButton();
        lMicroJRadioButton = new javax.swing.JRadioButton();
        semJRadioButton = new javax.swing.JRadioButton();
        vertiJRadioButton = new javax.swing.JRadioButton();
        horizJRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        resultJTabbedPane = new javax.swing.JTabbedPane();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        stableJCheckBox = new javax.swing.JCheckBox();
        centerJCheckBox = new javax.swing.JCheckBox();
        showImgJCheckBox = new javax.swing.JCheckBox();
        resultJScrollPaneList = new javax.swing.JScrollPane[1];
        resultJTableList = new javax.swing.JTable[1];
        resultJScrollPaneList[0] = new javax.swing.JScrollPane();
        resultJTableList[0] = new javax.swing.JTable();
        incJComboBox = new javax.swing.JComboBox();
        
        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(new java.awt.Point((int) (screenSize.getWidth() - 648)/2, (int) (screenSize.getHeight()-250)/2));
        setMaximumSize(new java.awt.Dimension(Integer.MAX_VALUE, 520));  

        addJButton.setText("Add Genotypes");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(genotypeJList);

        clearJButton.setText("Clear");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });

        rmSelJButton.setText("Remove Selected");
        rmSelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmSelJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Genotypes");

        runJButton.setText("Run");
        runJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJButtonActionPerformed(evt);
            }
        });
        
        exportJButton.setText("Export Results");
        exportJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportJButtonActionPerformed(evt);
            }
        });

        typeButtonGroup.add(lMicroJRadioButton);
        lMicroJRadioButton.setSelected(true);
        lMicroJRadioButton.setText("Light microscope");
        lMicroJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lMicroJRadioButtonActionPerformed(evt);
            }
        });

        typeButtonGroup.add(semJRadioButton);
        semJRadioButton.setText("SEM");
        semJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semJRadioButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Images were taken by:");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        resultJTableList[0].setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sample File", "ODId", "ODIa", "ODI", "Z", "P Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        resultJScrollPaneList[0].setViewportView(resultJTableList[0]);

        resultJTabbedPane.addTab("Result", resultJScrollPaneList[0]);

        jLabel3.setText("Rank ommatidia by:");

        stableJCheckBox.setText("Stability");
        stableJCheckBox.setSelected(true);

        centerJCheckBox.setText("Distance to the center");
        centerJCheckBox.setSelected(true);
        
        jLabel4.setText("Eyes were taken: ");

        directionButtonGroup.add(vertiJRadioButton);
        vertiJRadioButton.setSelected(true);
        vertiJRadioButton.setText("Vertically");

        directionButtonGroup.add(horizJRadioButton);
        horizJRadioButton.setText("Horizontally");

        jLabel5.setText("Number of ranked ommatidia considered:");

        incJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "50", "100", "150", "200", "250", "300" }));
        incJComboBox.setSelectedIndex(3);
        
        showImgJCheckBox.setText("Show processed images");
        showImgJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showImgJCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(layout.createSequentialGroup()
                            .add(3, 3, 3)
                            .add(clearJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(rmSelJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createSequentialGroup()
                            .addContainerGap()
                            .add(jScrollPane2))
                        .add(layout.createSequentialGroup()
                            .addContainerGap()
                            .add(jLabel1))
                        .add(layout.createSequentialGroup()
                            .addContainerGap()
                            .add(addJButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(stableJCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                                .add(centerJCheckBox))
                            .add(layout.createSequentialGroup()
                                .add(lMicroJRadioButton)
                                .add(24, 24, 24)
                                .add(semJRadioButton))
                            .add(layout.createSequentialGroup()
                                .add(vertiJRadioButton)
                                .add(46, 46, 46)
                                .add(horizJRadioButton))
                            .add(layout.createSequentialGroup()
                                .add(incJComboBox,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.VERTICAL))
                            .add(layout.createSequentialGroup()
                                .add(showImgJCheckBox,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.VERTICAL))
                            .add(layout.createSequentialGroup()
                                .add(runJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(exportJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 252, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(jLabel5))
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultJTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 648, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSeparator2)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(addJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(clearJButton)
                            .add(rmSelJButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(3, 3, 3)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(semJRadioButton)
                            .add(lMicroJRadioButton))
                        .add(3, 3, 3)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(vertiJRadioButton)
                            .add(horizJRadioButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(stableJCheckBox)
                            .add(centerJCheckBox))
                        .add(3, 3, 3)
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(incJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(showImgJCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(runJButton)
                            .add(exportJButton))
                        .add(0, 8, Short.MAX_VALUE))
                    .add(resultJTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:'
        Preferences prefs = Preferences.userRoot().node(getClass().getName());   //remember the last directory. add 04/06/2015
        JFileChooser fileChooser = new JFileChooser(prefs.get("LAST_USED_FOLDER", new File(".").getAbsolutePath()));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedDirectories.addAll(java.util.Arrays.asList(fileChooser.getSelectedFiles()));
            genotypesList.clear();
          for (int i = 0; i < selectedDirectories.size(); i ++) {
            //System.out.println(selectedDirectories.get(i).getName());
            genotypesList.add(i, selectedDirectories.get(i).getName());
          }
          genotypeJList.setModel(genotypesList);
          if (selectedDirectories.size() > 0) {
             prefs.put("LAST_USED_FOLDER", selectedDirectories.get(0).getParent());  //remember the last directory. add 04/06/2015
          }
        }
    }                                        

    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        genotypesList.clear();
        genotypeJList.setModel(genotypesList);
        selectedDirectories.clear();
    }                                        

    private void rmSelJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        int selectedInd = genotypeJList.getSelectedIndex();
        if (selectedInd != -1) {
            genotypesList.removeElementAt(selectedInd);
            selectedDirectories.remove(selectedInd);
        }
    }                                        

    private void runJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        javax.swing.table.DefaultTableModel model;
        final javax.swing.JDialog dlg = new javax.swing.JDialog(this, "In progress, please wait...", true);
        int threadCount;
            //parameters
        int inc = 200;
        boolean b_sem = false;
        boolean b_horiz = false;
        boolean b_show = false;
        int rankType = 0; //1: First #inc stable ommatidia; 2: Most #inc omatidia around the center; 
                              //3: First choose #inc+50 ommatidia most close to center, then get the first #inc stable ommatidia
        
        if (semJRadioButton.isSelected()) {
            b_sem = true;
        } else {
            b_sem = false;
        }
        
        if (vertiJRadioButton.isSelected()) {
            b_horiz = false;
        } else {
            b_horiz = true;
        }
        
        if (showImgJCheckBox.isSelected()) {
            b_show = true;
        } else {
            b_show = false;
        }
        
        rankType = 0;
        if (stableJCheckBox.isSelected()) {
            rankType += 1;
        }
        if (centerJCheckBox.isSelected()) {
            rankType += 2;
        }
        
        if (!centerJCheckBox.isSelected() && !stableJCheckBox.isSelected()) {
            javax.swing.JOptionPane.showMessageDialog(getContentPane(), "Please choose the method to rank the ommatidia.", 
                    "Dialog", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        
        inc = Integer.valueOf(incJComboBox.getSelectedItem().toString());
        
        dlg.setSize(300, 0);
        dlg.setDefaultCloseOperation(javax.swing.JDialog.DO_NOTHING_ON_CLOSE);
        dlg.setResizable(false);
        dlg.setLocationRelativeTo(this);
        Thread t = new Thread(new Runnable() {
            public void run() {
                dlg.setVisible(true);
            }
        });
        if (selectedDirectories.size() > 0) {
            t.start();
        }
        
        if (selectedDirectories.size() > 0) {
            resultJTabbedPane.removeAll();
        }
        
        resultJTableList = new javax.swing.JTable[selectedDirectories.size()];
        resultJScrollPaneList = new javax.swing.JScrollPane[selectedDirectories.size()];

        threadCount = Thread.activeCount();
        for (int i = 0; i < selectedDirectories.size(); i ++) {
            resultJTableList[i] = new javax.swing.JTable () {
                public boolean isCellEditable(int row, int column) {                
                    return false;               
                }
            };
            resultJScrollPaneList[i] = new javax.swing.JScrollPane();

            resultJTableList[i].setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String [] {
                "Sample File", "ODId", "ODIa", "ODI", "Z", "P Score"
                }
                ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
                };
            
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });
            resultJScrollPaneList[i].setViewportView(resultJTableList[i]);
            resultJTabbedPane.addTab(selectedDirectories.get(i).getName(), resultJScrollPaneList[i]);

            //get image files in the genotype
            for (int j = 0; j < selectedDirectories.get(i).listFiles().length; j ++) {
                if (selectedDirectories.get(i).listFiles()[j].isFile()) {
                    //System.out.println(selectedDirectories.get(i).listFiles()[j].getName());
                    Mat img = Highgui.imread(selectedDirectories.get(i).listFiles()[j].getAbsolutePath());
                    if (img.empty()) {
                        continue;
                    }
                    new PhenoRunner(resultJTableList[i], selectedDirectories.get(i).listFiles()[j].getName(), img, inc, b_sem, b_horiz, b_show, rankType);
                }
            }
        } 

        while (Thread.activeCount() > threadCount);
        
        for (int i = 0; i < selectedDirectories.size(); i ++) { 
            final File dir = selectedDirectories.get(i);
            resultJTableList[i].addMouseListener(new java.awt.event.MouseAdapter() {    
                public void mouseClicked(java.awt.event.MouseEvent evnt) {
                    javax.swing.JTable source = (javax.swing.JTable)evnt.getSource();
                    if (evnt.getClickCount() == 2) {
                        new ImageDisplay(new String(dir.getAbsolutePath()+"/"+source.getValueAt(source.getSelectedRow(), 0)));
                    }
                }
            });
        }


        
        dlg.setVisible(false);
    }     
    
    private void exportJButtonActionPerformed(java.awt.event.ActionEvent evt) {   
        if (selectedDirectories.size() == 0) return;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("*.csv", "csv"));
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                PrintWriter pw = new PrintWriter(file);
                for (int i = 0; i < resultJTableList.length; i ++) {
                    pw.print(selectedDirectories.get(i).getName());
                    pw.println();
                    for (int col = 0; col < resultJTableList[i].getColumnCount(); col ++) {
                        pw.print(resultJTableList[i].getColumnName(col));
                        if (col != resultJTableList[i].getColumnCount() - 1) {
                            pw.print(",");
                        }
                    }
                    pw.println();
                    for (int row = 0; row < resultJTableList[i].getRowCount(); row ++) {
                        for (int col = 0; col < resultJTableList[i].getColumnCount(); col ++) {
                            pw.print(resultJTableList[i].getValueAt(row, col).toString());
                            if (col != resultJTableList[i].getColumnCount() - 1) {
                                pw.print(",");
                            }
                        }
                        pw.println();
                    }
                }
                pw.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    private void lMicroJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        stableJCheckBox.setSelected(true);
        centerJCheckBox.setSelected(true);
    }
    
    private void semJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        stableJCheckBox.setSelected(true);
        centerJCheckBox.setSelected(false);
    }
    
    private void showImgJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        javax.swing.JDialog dlg = new javax.swing.JDialog(this, "Warning!", true);
        javax.swing.JLabel label = new javax.swing.JLabel("Multiple image windows will appear on your screen after running.");
        dlg.add(label);
        dlg.pack();
        dlg.setSize(label.getSize().width + 10, 50);
        dlg.setResizable(false);
        dlg.setLocationRelativeTo(this);
        if (showImgJCheckBox.isSelected()) {
            dlg.setVisible(true);
        }
    }
    
    /*public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EyeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EyeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EyeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EyeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EyeGUI().setVisible(true);
            }
        });
    }*/
    
    
    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup typeButtonGroup;
    private javax.swing.ButtonGroup directionButtonGroup;
    private javax.swing.JButton addJButton;
    private javax.swing.JButton clearJButton;
    private javax.swing.JButton rmSelJButton;
    private javax.swing.JButton runJButton;
    private javax.swing.JButton exportJButton;
    private javax.swing.JCheckBox stableJCheckBox;
    private javax.swing.JCheckBox centerJCheckBox;
    private javax.swing.JCheckBox showImgJCheckBox;
    private javax.swing.JComboBox incJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList genotypeJList;
    private javax.swing.JRadioButton lMicroJRadioButton;
    private javax.swing.JRadioButton semJRadioButton;
    private javax.swing.JRadioButton vertiJRadioButton;
    private javax.swing.JRadioButton horizJRadioButton;
    private javax.swing.JScrollPane[] resultJScrollPaneList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane resultJTabbedPane;
    private javax.swing.JTable[] resultJTableList;
    // End of variables declaration                   
}

class ArrayIndexComparator implements Comparator<Integer> {
    private final double[] array;

    public ArrayIndexComparator(double[] array) {
        this.array = array;
    }

    public Integer[] createIndexArray() {
        Integer[] indexes = new Integer[array.length];
        for (int i = 0; i < array.length; i++)
        {
            indexes[i] = i; 
        }
        return indexes;
    }

    @Override
    public int compare(Integer index1, Integer index2) {
        if (array[index1] < array[index2]) 
            return -1;
        else if (array[index1] > array[index2])
            return 1;
        else return 0;        
    }
}

class ImageDisplay {
    private Mat img;
    private String fileName;
    
    public ImageDisplay(String filePath) {
        this.fileName = filePath;
        this.img = Highgui.imread(filePath);
        displayImage();
    }
    
    public ImageDisplay(Mat img, String fileName) {
        this.img = img.clone();
        this.fileName = fileName;
        displayImage();
    }
    
    private BufferedImage Mat2BufferedImage() {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if ( img.channels() > 1 ) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = img.channels()*img.cols()*img.rows();
        byte [] b = new byte[bufferSize];
        img.get(0,0,b); // get all the pixels
        BufferedImage image = new BufferedImage(img.cols(),img.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);  
        return image;
    }
    
    private void displayImage() {
        java.awt.Image image = Mat2BufferedImage();
        javax.swing.ImageIcon icon=new javax.swing.ImageIcon(image);
        javax.swing.JFrame frame=new javax.swing.JFrame();
        frame.setLayout(new java.awt.FlowLayout());        
        frame.setSize(image.getWidth(null)+50, image.getHeight(null)+50);     
        javax.swing.JLabel lbl=new javax.swing.JLabel();
        lbl.setIcon(icon);
        frame.add(lbl);
        frame.setTitle(fileName);
        frame.setVisible(true);
    }
}

class PhenoRunner extends Thread {
    private javax.swing.JTable table;
    private String fileName;
    private Mat img; 
    private int eyeX;
    private int eyeY;
    private int r = 9;
    private RotatedRect eps;
    private ArrayList<Point> cpt = new ArrayList();
    
    private double phenoScore;
    private double e;
    private double ae;
    private double de;
    private Integer z; 
    
    private int inc = 200;
    private boolean b_sem = false;
    private boolean b_horiz = false;
    private boolean b_show = false;
    private int rankType = 3;
    
    public PhenoRunner(javax.swing.JTable table, String fileName, Mat img, 
            int inc, boolean b_sem, boolean b_horiz, boolean b_show, int rankType) {
        this.table = table;
        this.fileName = fileName;
        this.img = img.clone();
        this.b_sem = b_sem;
        this.b_horiz = b_horiz;
        this.b_show = b_show;
        this.inc = inc;
        this.rankType = rankType;
        
        if (this.b_sem) r = 2;
        
        start();
    }
    
    public void run() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) table.getModel();
        
        if (!b_sem) {
            localizeEye();
        } else {
            localizeSemEye();
        }
        detectOmmatidia();
        calEntropy();
        
        model.addRow(new Object[]{fileName, de, ae, e, z, phenoScore});
        model.fireTableDataChanged();
        table.repaint();
        try {
            Thread.sleep(100);
        } catch (InterruptedException ex) {}
    }
    
    double vector_angle(Point c, Point p1, Point p2) {
        double dotp;
        double angle;
    
        dotp = (p1.x - c.x) * (p2.x - c.x) + (p1.y - c.y) * (p2.y - c.y);
        angle = dotp/(Math.sqrt(Math.pow(p1.x - c.x,2) + Math.pow(p1.y - c.y, 2)) * Math.sqrt(Math.pow(p2.x - c.x, 2) + Math.pow(p2.y - c.y, 2)));
    
        if (angle >= 1) {
            return 0;
        } else if (angle <= -1) {
            return Math.PI;
        }
    
        return Math.acos(angle);
    }
    
    private int ImAdjust(Mat image, Mat adj_image, 
            double low_in[], double high_in[], 
            double low_out[], double high_out[], 
            double gamma) {
        
        double[] low_in2 = new double[3];
        double[] high_in2 = new double[3];
        double[] low_out2 = new double[3];
        double[] high_out2 = new double[3];
        double[] err_in = new double[3];
        double[] err_out = new double[3];
        double[] pixel = new double[3];
        int x, y, c;

        for (c = 0; c < 3; c++) {
            if (low_in[c] < 0 || low_in[c] > 1 || high_in[c] < 0 || high_in[c] > 1 
                || low_out[c] < 0 || low_out[c] > 1 || high_out[c] < 0 || high_out[c] > 1 
                || low_in[c] > high_in[c]) {
            return -1;
           }
            low_in2[c] = low_in[c] * 255;
            high_in2[c] = high_in[c] * 255;
            low_out2[c] = low_out[c] * 255;
            high_out2[c] = high_out[c] * 255;
            err_in[c] = high_in[c] - low_in[c];
            err_out[c] = high_out[c] - low_in[c];
        }
  
        for (y = 0; y < image.rows(); y++) {
            for (x = 0; x < image.cols(); x++) {
                for (c = 0; c < 3; c++) {
                    pixel[c] = Math.pow((image.get(y, x)[c] - low_in2[c])/err_in[c], gamma) * err_out[c] + low_out2[c]; 
                }
                adj_image.put(y, x, pixel);
            }
        }
  
        return 0;
    }
    
    Mat strelDisk(int Radius){ 
        Mat sel = new Mat(new Size((2*Radius-1),(2*Radius-1)),CvType.CV_8U,new Scalar(255, 255, 255));
        int borderWidth = Radius;
        switch (Radius){
            case 1: borderWidth = 0; break;
            case 3: borderWidth = 0; break;
            case 5: borderWidth = 2; break;
            case 7: borderWidth = 2; break;
            case 9: borderWidth = 4; break;
            case 11: borderWidth = 6; break;
            case 13: borderWidth = 6; break;
            case 15: borderWidth = 8; break;
            case 17: borderWidth = 8; break;
            case 19: borderWidth = 10; break;
            case 21: borderWidth = 10; break;
        }

        for (int i = 0; i < borderWidth; i++){
            for (int j = 0; j< borderWidth; j++){
                if (i + j < 8){
                    sel.put(i, j, 0);
                    sel.put(i, sel.cols()-1-j, 0);
                    sel.put(sel.rows()-1-i, j, 0);
                    sel.put(sel.rows()-1-i, sel.cols()-1-j, 0);
                }
            }
        }
    
        return sel;
    }
    
    ArrayList<Point> bhContoursCenter(List<MatOfPoint> contours) {
        ArrayList<Point> result = new ArrayList();
        for (int i=0; i < contours.size();i++) {
            Moments m = Imgproc.moments(contours.get(i),true);
            if (m.get_m10()/m.get_m00() > 0 && m.get_m01()/m.get_m00() > 0) {
                result.add(new Point(m.get_m10()/m.get_m00(), m.get_m01()/m.get_m00()));
            }
        }

        return result;
    }
    
    private ArrayList<Point> bhFindLocalMaximum(Mat image, int neighbor, boolean b_sem){
        Mat peak_img = image.clone();

        Imgproc.dilate(peak_img, peak_img, new Mat(), new Point(-1,-1), neighbor);
        Core.subtract(peak_img, image, peak_img);

        Mat flat_img = image.clone();
        Imgproc.erode(image,flat_img, new Mat(), new Point(-1,-1), neighbor);
        Core.subtract(image, flat_img, flat_img);
        
        Imgproc.threshold(peak_img,peak_img,0,255,Imgproc.THRESH_BINARY);
        Imgproc.threshold(flat_img,flat_img,0,255,Imgproc.THRESH_BINARY);
        Core.bitwise_not(flat_img,flat_img);

        peak_img.setTo(new Scalar(255,255,255),flat_img);
        Core.bitwise_not(peak_img,peak_img);
        if (!b_sem) {
            Imgproc.dilate(peak_img, peak_img, new Mat(),new Point(-1,-1),3);
        }

        List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
        Imgproc.findContours(peak_img, contours, new Mat(), Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

        return bhContoursCenter(contours);
    }
    
    private MatOfPoint2f getMaxContour(Mat img, double maxA[]) {
        List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
        Mat ctImg = Mat.zeros(img.height(), img.width(), CvType.CV_8UC1);
        MatOfPoint2f contour;
        int maxIdx = 0;
        Moments M;
        
        maxA[0] = 0;
        Imgproc.findContours(img, contours, new Mat(), Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);
        Imgproc.drawContours(ctImg, contours, -1, new Scalar(255), Core.FILLED);
        for( int i = 0; i< contours.size(); i++ ) {
            M = Imgproc.moments(contours.get(i));
            if (maxA[0] < Imgproc.contourArea(contours.get(i))) {
                int x = (int) (M.get_m10()/M.get_m00());
                int y = (int) (M.get_m01()/M.get_m00());
                if (x > 0 && x < 0.75* ctImg.cols() && y > 0 && y < 0.75 * ctImg.rows()) {
                    maxA[0] = Imgproc.contourArea(contours.get(i));
                    maxIdx = i;    
                }
            }       
        }
        
        contour = new MatOfPoint2f(contours.get(maxIdx).toArray());
        for( int i = 0; i< contours.size(); i++ ) {
            contours.remove(i);
        }
        ctImg.release();
        
        return contour;
    }
    
    private void localizeEye() {
        Mat bkImg;
        Mat midImg;
        MatOfPoint2f maxPoints;    
        double[] maxA = {0};
        int areaMin = 250000;
        int struX = 3;
        int struY = 3;
        int i = 0;
        
        bkImg = Mat.zeros(img.size(), img.type());
        midImg = Mat.zeros(img.size(), img.type());
     
        Imgproc.cvtColor(img, bkImg, Imgproc.COLOR_RGB2GRAY); 
        
        Imgproc.morphologyEx(bkImg, bkImg, Imgproc.MORPH_TOPHAT, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(15,15), new Point(-1,-1)));
        
        if (img.rows() * img.cols() <= 800 * 600) { 
            areaMin = 250000 * (800 * 600 / (1800 * 2400));
        } else if (img.rows() * img.cols() <= 1200 * 1600) {
            struX = 2 * struX + 1;
            struY = 2 * struY + 1;
            areaMin = 250000*(1200 * 1600 / (2400 * 1800));
        } else if (img.rows() * img.cols() <= 1800 * 2400) {
            struX *= 3;
            struY *= 3;      
        } else {
            areaMin = 250000*(3600 * 4800 / (2400 * 1800));
        }
        
        Imgproc.GaussianBlur(bkImg, bkImg, new Size(struX, struY), 0, 0, Imgproc.BORDER_DEFAULT);
        Imgproc.Sobel(bkImg, bkImg, bkImg.depth(), 1, 0, 3, 1, 0, Imgproc.BORDER_DEFAULT);
        Core.convertScaleAbs(bkImg, bkImg);
        Imgproc.Canny(bkImg, bkImg, 60, 100, 3, false); //Changed consistent with c++ program, but with true; 04/06/2015 from 50,100 to 60, 100
        
        //add 2-steps eye area identification (1. identify the center; 2. identify the width and height). 04/06/2015 
        if (img.rows() * img.cols() <= 1800 * 2400) {
            struX = 45;
            struY = 45;      
        } else {
            struX = 90;
            struY = 90; 
        }
        
        if (img.rows() * img.cols() > 1200 * 1600) {
            while (maxA[0] < areaMin & i < 3) {
                Imgproc.morphologyEx(bkImg, midImg, Imgproc.MORPH_CLOSE, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(struX, struY), new Point(-1,-1)));
                maxPoints = getMaxContour(midImg, maxA); 
                eps = Imgproc.fitEllipse(maxPoints);
                struX += 20;
                struY += 20;
                i++;
            }
            eyeX = (int) eps.center.x;
            eyeY = (int) eps.center.y; 
            midImg.release();
        }
        //done with the 1st step, identified the center of the eye     
        
        if (img.rows() * img.cols() <= 800 * 600) {
            Imgproc.morphologyEx(bkImg, bkImg, Imgproc.MORPH_CLOSE, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(80,100), new Point(-1,-1)));
            Imgproc.erode(bkImg, bkImg, new Mat(), new Point(-1,1), 120);
            Imgproc.dilate(bkImg, bkImg, new Mat(), new Point(-1,1), 100);
        } else {
            Imgproc.morphologyEx(bkImg, bkImg, Imgproc.MORPH_CLOSE, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(2 * struX, 2 * struY + 10), new Point(-1,-1)));  //changed to (80,90)
        }
        
        maxPoints = getMaxContour(bkImg, maxA);
        
        if (maxPoints.toArray().length > 5) {
            eps = Imgproc.fitEllipse(maxPoints);
            if (b_horiz) eps.angle = 90;
        } else {
            eps = new RotatedRect(new Point(img.cols()/2, img.rows()/2), new Size(img.cols(),img.rows()), 0);
        }               
        
        if (eyeX != 0) {
            eps.center.x = eyeX;
            eps.center.y = eyeY;
        } else {
            eyeX = (int) eps.center.x;
            eyeY = (int) eps.center.y;
        }
        bkImg.release();
    }
    
    private void localizeSemEye() {
        Mat bkImg;
        Mat midImg;
        Mat adjImg;
        Mat invtImg;
        double[] low_in = {0.1, 0.2, 0.4};
        double[] high_in = {0.8, 0.7, 0.9};
        double[] low_out = {0, 0, 0};
        double[] high_out = {1, 1, 1};
        MatOfPoint2f maxPoints;    
        double[] maxA = {0};
        int meanPix = 0;
        int areaMin = 250000;
        int struX = 3;
        int struY = 3;
        int i = 0;
        
        adjImg = Mat.zeros(img.size(), img.type());
        bkImg = Mat.zeros(img.size(), img.type());
        midImg = Mat.zeros(img.size(), img.type());

        if ((Core.mean(img).val)[0] > 50) {
            ImAdjust(img, adjImg, low_in, high_in, low_out, high_out, 1);
            meanPix = 150;
        } else {
            img.copyTo(adjImg); 
            meanPix = (int) ((Core.mean(img).val)[0] + 5);
        }
        Imgproc.cvtColor(adjImg, bkImg, Imgproc.COLOR_RGB2GRAY); 
       
        Imgproc.threshold( bkImg, adjImg, meanPix, 255, 4);  
        invtImg = new Mat(adjImg.rows(), adjImg.cols(), adjImg.type(), new Scalar(255));
        Core.subtract(invtImg, adjImg, bkImg);
        
        if (img.rows() * img.cols() <= 800 * 600) { 
            areaMin = 250000 * (800 * 600 / (1800 * 2400));
        } else if (img.rows() * img.cols() <= 1200 * 1600) {
            struX = 2 * struX + 1;
            struY = 2 * struY + 1;
            areaMin = 250000*(1200 * 1600 / (2400 * 1800));
        } else {
            struX *= 3;
            struY *= 3;      
        } 
       
        Imgproc.GaussianBlur(bkImg, bkImg, new Size(struX, struY), 0, 0, Imgproc.BORDER_DEFAULT);
       
        Imgproc.Sobel(bkImg, bkImg, bkImg.depth(), 1, 0, 3, 1, 0, Imgproc.BORDER_DEFAULT);
        Core.convertScaleAbs(bkImg, bkImg);
        Imgproc.Canny(bkImg, bkImg, 60, 120, 3, true); //Changed consistent with c++ program, but with true; 04/06/2015 from 50,100 to 60, 100
   
        Imgproc.morphologyEx(bkImg, bkImg, Imgproc.MORPH_CLOSE, Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(35, 35), new Point(-1,-1)));      
        
        maxPoints = getMaxContour(bkImg, maxA);
        
        if (maxPoints.toArray().length > 5) {
            eps = Imgproc.fitEllipse(maxPoints);
            if (b_horiz) eps.angle = 90;
        } else { 
            eps = new RotatedRect(new Point(img.cols()/2, img.rows()/2), new Size(img.cols(),img.rows()), 0);
        }   
        
        eyeX = (int) eps.center.x;
        eyeY = (int) eps.center.y;

        bkImg.release();
        adjImg.release();
    }
    
    
    private void detectOmmatidia() {
        Mat adjImg = Mat.zeros(img.size(), img.type());
        Mat midImg = Mat.zeros(img.size(), img.type()); 
        Mat grayImg = Mat.zeros(img.size(), img.type());
        Mat invtImg = new Mat(img.rows(), img.cols(), img.type(), new Scalar(255,255,255));
        Mat invtGImg = Mat.zeros(img.size(), img.type());
        double[] low_in = {0, 0.1, 0.1};
        double[] high_in = {1, 0.9, 0.9};
        double[] low_out = {0, 0, 0};
        double[] high_out = {1, 0, 0};
        Point[] rect_pts = new Point[4]; 
        double eps_width;
        double eps_height;
        int neighbor = 25; 
        ArrayList<Point> cptArr = new ArrayList();
        
        if (img.rows() * img.cols() <= (800 * 600)) {
            if (!b_sem) 
                neighbor = 7; 
            else 
                neighbor = 11;
        } else if (img.rows() * img.cols() <= (1600 * 1200)) {
            neighbor = 13;
        } else if (img.rows() * img.cols() <= (2400 * 1800)) {
            neighbor = 25;
        } else {
            neighbor = 60;
        }
        
        ImAdjust(img, adjImg, low_in, high_in, low_out, high_out, 1);
        
        Imgproc.morphologyEx(adjImg, adjImg, Imgproc.MORPH_TOPHAT, strelDisk(15));
        
        ImAdjust(adjImg, midImg, low_in, high_in, low_out, high_out, 1);
        Core.subtract(invtImg, midImg, adjImg);
        Imgproc.cvtColor(adjImg, grayImg, Imgproc.COLOR_RGB2GRAY); 
        if (!b_sem && img.rows() * img.cols() <= 800 * 600) 
        {
            Imgproc.medianBlur(grayImg, adjImg, 7);
        } else {
            if (img.rows() * img.cols() > 1800 * 2400) {
                Imgproc.medianBlur(grayImg, adjImg, 19);
            } else {
                Imgproc.medianBlur(grayImg, adjImg, 13);
            }
        }

        if (!b_sem) {
            Imgproc.cvtColor(invtImg, invtGImg, Imgproc.COLOR_BGR2GRAY);
            Core.subtract(invtGImg, adjImg, midImg);
        } else {
            adjImg.copyTo(midImg);
        }

        cptArr = bhFindLocalMaximum(midImg, neighbor, b_sem); 
        
        eps.points( rect_pts );  
        eps_width = eps.size.width;
        eps_height = eps.size.height;
        
        if (!b_horiz && eps_width/eps_height > 0.67) {
            eyeX = (int) (eps.center.x + (eps.size.width - eps.size.height * 0.67)/4);
            eps_width = eps.size.height * 0.67;
        }
        if (eps.size.height > img.rows()) {  
            eps.size.height = img.rows();
            //Add 11_18_2014, should also consider horizontal, if eps.size.width > image.col;
            //Also should consider move the center with change of the size
            if (b_horiz) {
                eps_width = eps.size.height / 0.67;
            } else {
                eps_width = eps.size.height * 0.67;
            }
        }
        
        if (b_horiz && eps.size.width < eps.size.height) {
            eps_width += eps_height;
            eps_height = eps_width - eps_height;
            eps_width = eps_width - eps_height;
        }
        
        for (int i = 0; i < cptArr.size(); i ++) {
            if (Math.pow((cptArr.get(i).x - eyeX)/(eps_width/2),2) + Math.pow((cptArr.get(i).y - eyeY)/(eps_height/2),2) < 1) {
                    cpt.add(cptArr.get(i));
                    Core.circle(img, cptArr.get(i), r, new Scalar(65, 110, 244), 3);
            } 
        }
      
        if (b_show) {
            int w = img.width()/3 > 600 ? img.width()/3 : img.width();         //add 04/06/2015. Open image file in a smaller size
            int h = img.height()/3 > 400 ? img.height()/3 : img.height();
            midImg.release();
            midImg = new Mat();
            Imgproc.resize(img, midImg, new Size(w, h));
            new ImageDisplay(midImg, fileName);
        }
        adjImg.release();
        midImg.release();
        grayImg.release();
        invtImg.release();
        invtGImg.release();
    }
    
    private void calEntropy() {
        double[] vrow = new double[cpt.size()];
        Integer[] vid;
        Integer[] subvid = new Integer[inc + 50];
        Integer[] newvid;
        double[] vde = new double[cpt.size()];
        double[] vae = new double[cpt.size()];
        double[] ve = new double[cpt.size()];
        double[] subvde;
        double[] subvae;
        double[] subve;
        double[] dc = new double[cpt.size()]; //vector to record the distance from each ommatidia to the center of the eye
        double[] angle = new double[5];
        Integer[] aid = new Integer[cpt.size()];
        ArrayIndexComparator comparator;
        int i, j, k, n; 
        
        e = 0; ae = 0; de = 0; phenoScore = 0; z = cpt.size();
        
        if (cpt.size() == 0) return;
        
        for (i = 0; i < cpt.size(); i ++) {
            for (j = 0; j < cpt.size(); j ++) {
                vrow[j] = Math.sqrt(Math.pow(cpt.get(i).x - cpt.get(j).x, 2) + Math.pow(cpt.get(i).y - cpt.get(j).y, 2));
            }
            dc[i] = Math.sqrt(Math.pow(cpt.get(i).x - eyeX, 2) + Math.pow(cpt.get(i).y - eyeY, 2));
            comparator = new ArrayIndexComparator(vrow);
            vid = comparator.createIndexArray();
            Arrays.sort(vid, comparator);
            
            vde[i] = 0;
            for (j = 2; j < 7; j ++) {
                vde[i] += (vrow[vid[j]]/vrow[vid[1]] - 1);
            }
        
            for (j = 1; j < 7; j ++) {
                n = 0;
                for (k = 1; k < 7; k ++) {
                    if (j != k) {
                        angle[n++] = vector_angle(cpt.get(vid[0]), cpt.get(vid[j]), cpt.get(vid[k]));
                    }
                }
                comparator = new ArrayIndexComparator(angle);
                aid = comparator.createIndexArray();
                Arrays.sort(aid, comparator);
                vae[i] += Math.abs(Math.PI/3 - angle[aid[0]]) + Math.abs(Math.PI/3 - angle[aid[1]]);
            }
            ve[i] = Math.log(vde[i] + vae[i]); 
        } 
        
        if (rankType == 1) {
            comparator = new ArrayIndexComparator(ve);
            vid = comparator.createIndexArray();
            Arrays.sort(vid, comparator);
            for (i = 0; i < (inc < ve.length ? inc : ve.length); i ++) {
                e += ve[vid[i]];
                de += vde[vid[i]];
                ae += vae[vid[i]];
            }
        } else {
            comparator = new ArrayIndexComparator(dc);
            vid = comparator.createIndexArray();
            Arrays.sort(vid, comparator);
            if (rankType == 2) {
                for (i = 0; i < (inc < ve.length ? inc : ve.length); i ++) {
                e += ve[vid[i]];
                de += vde[vid[i]];
                ae += vae[vid[i]];
                }
            } else {
                if ((inc + 50) < ve.length) {
                    subvde = new double[inc + 50];
                    subvae = new double[inc + 50];
                    subve = new double[inc + 50];
                    System.arraycopy(vid, 0, subvid, 0, inc + 50);
                    for (i = 0; i < subvid.length; i++) {
                        subve[i] = ve[subvid[i]];
                        subvae[i] = vae[subvid[i]];
                        subvde[i] = vde[subvid[i]];
                    }
                } else {
                    subvde = new double[ve.length];       //fixed the bug on 04/06/2015
                    subvae = new double[vae.length];
                    subve = new double[vde.length];
                    System.arraycopy(ve, 0, subve, 0, ve.length);
                    System.arraycopy(vae, 0, subvae, 0, vae.length);
                    System.arraycopy(vde, 0, subvde, 0, vde.length);
                }
                comparator = new ArrayIndexComparator(subve);
                newvid = comparator.createIndexArray();
                Arrays.sort(newvid, comparator);
    
                for (i = 0; i < (inc < ve.length ? inc : ve.length); i ++) {
                    e += subve[newvid[i]];
                    de += subvde[newvid[i]];
                    ae += subvae[newvid[i]];
                }
            }
        }
    
        if (inc > z) {
            e = inc * e/z;
            de = inc * de/z;
            ae = inc * ae/z;
        }
    
        phenoScore = Math.exp(-Math.log(Math.log(z)))*e;
    }         
}

